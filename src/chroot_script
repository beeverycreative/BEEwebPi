#!/usr/bin/env bash
set -x
set -e
# BEEwebPI generation script
# Helper script that runs in a Raspbian chroot to create the BEEwebPI distro
# Written by Guy Sheffer <guysoft at gmail dot com>
# GPL V3

source /common.sh

unpack /filesystem/home/pi /home/pi pi
unpack /filesystem/home/root /root root
unpack /filesystem/boot /boot
apt-get update

apt-get remove -y --purge scratch squeak-plugins-scratch squeak-vm wolfram-engine python-minecraftpi minecraft-pi sonic-pi oracle-java8-jdk

#apt-get beeweb virtualenv
apt-get -y --force-yes install python2.7 python-virtualenv python-dev git screen libts-bin subversion cmake checkinstall avahi-daemon libavahi-compat-libdnssd1

pushd /home/pi

  #build virtualenv
  sudo -u pi virtualenv --system-site-packages oprint
  
  # BEEweb & pyserial
  if [ "$BEEWEBPI_INCLUDE_BEEWEB" == "yes" ]
  then
    echo "--- Installing BEEweb"
    apt-get install -y --force-yes python-numpy python-netifaces
    apt-get remove -y python-serial

    #pyserial that can handle non-standard baud rates
    #sudo -u pi svn co http://pyserial.svn.sourceforge.net/svnroot/pyserial/trunk pyserial
    #pushd pyserial/pyserial
    #  sudo -u pi /home/pi/oprint/bin/python setup.py install
    #popd
    

    #pybonjour (for mdns discovery)
    sudo -u pi /home/pi/oprint/bin/python /home/pi/pybonjour-1.1.1/setup.py install

    #BEEweb
    gitclone BEEWEBPI_BEEWEB_REPO BEEweb
    pushd BEEweb
      PIP_DEFAULT_TIMEOUT=60 sudo -u pi /home/pi/oprint/bin/python setup.py install
    popd
  fi

  #OctoPiPanel
  if [ "$BEEWEBPI_INCLUDE_OCTOPIPANEL" == "yes" ]
  then
    echo "--- Installing OctoPiPanel"
    gitclone BEEWEBPI_OCTOPIPANEL_REPO OctoPiPanel
    pushd OctoPiPanel
      sudo -u pi /home/pi/oprint/bin/pip install -r requirements.txt
    popd

    #Add fbcp for TFT screens
    gitclone BEEWEBPI_FBCP_REPO rpi-fbcp
    pushd rpi-fbcp
      sudo -u pi mkdir build
      pushd build
        sudo -u pi cmake ..
        sudo -u pi make
        install fbcp /usr/local/bin/fbcp
        sudo -u pi make clean
      popd
    popd
  fi

  #mjpg-streamer
  if [ "$BEEWEBPI_INCLUDE_MJPGSTREAMER" == "yes" ]
  then
    echo "--- Installing mjpg-streamer"
    apt-get -y --force-yes install libjpeg8-dev imagemagick libav-tools libv4l-dev
    gitclone BEEWEBPI_MJPGSTREAMER_REPO mjpg-streamer
    pushd mjpg-streamer
      mv mjpg-streamer-experimental/* .
      sudo -u pi make
    popd
  fi
  
  #CuraEngine
  if [ "$BEEWEBPI_INCLUDE_CURAENGINE" == "yes" ]
  then
    echo "--- Installing CuraEngine"
    folder=CuraEngine-$BEEWEBPI_CURAENGINE_VERSION
    zipfile=$folder.zip
    apt-get -y install gcc-4.7 g++-4.7
    sudo -u pi wget -O$zipfile $BEEWEBPI_CURAENGINE_ARCHIVE
    sudo -u pi unzip $zipfile
    pushd $folder
      sudo -u pi wget https://gist.githubusercontent.com/foosel/f86d6a729c0187ff8a82/raw/3d4f152b924080f502d887d11269f27a2389d64d/CuraEngine.patch
      sudo -u pi patch < CuraEngine.patch
      sudo -u pi make CXX=g++-4.7 VERSION=$BEEWEBPI_CURAENGINE_VERSION
      cp build/CuraEngine /usr/local/bin/cura_engine
    popd
    sudo -u pi rm -r $folder $zipfile
  fi

  #setup haproxy for http and https, and webcam
  if [ "$BEEWEBPI_INCLUDE_HAPROXY" == "yes" ]
  then
    echo "--- Installing haproxy"
    export HAPROXY_VERSION=BEEWEBPI_HAPROXY_VERSION
    sudo apt-get -y --force-yes install ssl-cert libssl-dev libpcre3-dev
    rm /etc/ssl/private/ssl-cert-snakeoil.key /etc/ssl/certs/ssl-cert-snakeoil.pem
    sudo -u pi wget $BEEWEBPI_HAPROXY_ARCHIVE
    sudo -u pi tar xzvf haproxy-$BEEWEBPI_HAPROXY_VERSION.tar.gz
    rm haproxy-$BEEWEBPI_HAPROXY_VERSION.tar.gz
    sudo -u pi mv `ls | grep haproxy | head -n 1` haproxy-ss
    pushd haproxy-ss
      sudo -u pi make TARGET=linux2628 USE_LINUX_SPLICE=1 USE_LINUX_TPROXY=1 USE_PCRE=1 USE_OPENSSL=1
      mkdir -p /usr/local/share/man/man1 /usr/local/doc /usr/local/doc/haproxy
      sudo checkinstall --default --pkgname haproxy --pkgversion 1.5
    popd
    rm -rf haproxy-ss

    adduser --system --disabled-password --disabled-login --home /var/lib/haproxy \
            --no-create-home --quiet --force-badname --group haproxy
  fi

  if [ "$BEEWEBPI_INCLUDE_WIRINGPI" == "yes" ]
  then
    echo "--- Installing WiringPi"
    gitclone BEEWEBPI_WIRINGPI_REPO wiringPi
    pushd wiringPi
      sudo -u pi ./build
    popd
  fi
  
popd

#Make sure user pi has access to serial ports
usermod -a -G tty pi
usermod -a -G dialout pi

# store beewebpi commit used to build this image
echo "$BEEWEBPI_COMMIT" > /etc/beewebpi_commit

# allow pi user to run shutdown and service commands
echo "pi ALL=NOPASSWD: /sbin/shutdown" > /etc/sudoers.d/beeweb-shutdown
echo "pi ALL=NOPASSWD: /sbin/service" > /etc/sudoers.d/beeweb-service

#reach printer by name
echo "$BEEWEBPI_OVERRIDE_HOSTNAME" > /etc/hostname
sed -i -e "s@raspberrypi@$BEEWEBPI_OVERRIDE_HOSTNAME@g" /etc/hosts

#make sure users don't run git with sudo, thus breaking permissions, by adding /root/bin to the
#default sudo path and placing a git wrapper script there that checks if it's run as root
sed -i "s@secure_path=\"@secure_path=\"/root/bin:@g" /etc/sudoers
chmod +x /root/bin/git

# enable raspicam
echo "# enable raspicam" >> /boot/config.txt
echo "start_x=1" >> /boot/config.txt
echo "gpu_mem=128" >> /boot/config.txt

# allow network configuration via /boot/beewebpi-network.txt
sed -i "s@iface wlan0 @iface wlan0-raspbian @g" /etc/network/interfaces
sed -i "s@iface wlan1 @iface wlan1-raspbian @g" /etc/network/interfaces
echo "mapping wlan0" >> /etc/network/interfaces
echo "  script /root/bin/map_iface" >> /etc/network/interfaces
echo "mapping wlan1" >> /etc/network/interfaces
echo "  script /root/bin/map_iface" >> /etc/network/interfaces
echo "source /boot/beewebpi-network.txt" >> /etc/network/interfaces

#unpack root in the end, so etc file are not overwritten, might need to add two roots int he future
unpack /filesystem/root /

#####################################################################
### setup services

### BEEweb

if [ "$BEEWEBPI_INCLUDE_BEEWEB" == "yes" ]
then
  update-rc.d beeweb defaults 95
else
  # let's remove the configs for system services we don't need
  rm /etc/init.d/beeweb
  rm /etc/default/beeweb
fi

### haproxy

if [ "$BEEWEBPI_INCLUDE_HAPROXY" == "yes" ]
then
  update-rc.d gencert defaults
  update-rc.d haproxy defaults 99
else
  # let's remove the configs for system services we don't need
  rm /etc/init.d/gencert
  rm /etc/init.d/haproxy
  rm /etc/default/haproxy
  rm /etc/logrotate.d/haproxy
  rm /etc/rsyslog.d/49-haproxy.conf

  # also we need to make BEEweb bind to all interfaces because otherwise
  # it will be unaccessible...
  [ -f /etc/default/beeweb ] && sed -i "s@HOST=127.0.0.1@HOST=0.0.0.0@" /etc/default/beeweb 
fi

### CuraEngine

if [ ! "$BEEWEBPI_INCLUDE_CURAENGINE" == "yes" ]
then
  # unconfigure the cura engine path in beeweb's config.yaml
  sudo -u pi sed -i -e "s@cura_engine: /usr/local/bin/cura_engine@cura_engine:@g" /home/pi/.beeweb/config.yaml
fi

### mjpg_streamer

if [ "$BEEWEBPI_INCLUDE_MJPGSTREAMER" == "yes" ]
then
  # make webcamd autostart
  update-rc.d webcamd defaults
else
  rm /etc/logrotate.d/webcamd
  rm /etc/init.d/webcamd
  rm /etc/default/webcamd
  rm /root/bin/webcamd
fi

### OctoPiPanel

if [ ! "$BEEWEBPI_INCLUDE_OCTOPIPANEL" == "yes" ]
then
  # we don't need the tft setup stuff
  rm /home/pi/scripts/OctoPiPanel
  rm /home/pi/scripts/calibrate-rpi-display
  rm /home/pi/scripts/enable-adafruit-pitft
  rm /home/pi/scripts/enable-rpi-display
  rm /boot/cmdline-pi-tft.txt
  rm /etc/udev/rules.d/95-ads7846.rules
fi

# removes the libusb-1.0-0 due to a bug with pyusb: https://github.com/walac/pyusb/issues/57
apt-get remove -y libusb-1.0-0

# installs the necessary extra packages for BeeWeb
apt-get -y install libtool autotools-dev automake bridge-utils iw dnsmasq

# compiles libusb
git clone https://github.com/libusb/libusb
pushd libusb
	./bootstrap.sh
	./configure --host=arm-linux-gnueabihf --disable-udev
	make
	sudo make install
popd

sudo usermod -a -G root pi

# compiles custom hostapd
wget https://github.com/jenssegers/RTL8188-hostapd/archive/v2.0.tar.gz
tar -zxvf v2.0.tar.gz
pushd RTL8188-hostapd-2.0/hostapd
	sudo make
	sudo make install
popd

# replaces the dnsmasq.conf
sudo cp /etc/dnsmasq.conf.dist /etc/dnsmasq.conf

# replaces the hostapd.conf
sudo cp /etc/hostapd/hostapd.conf.dist /etc/hostapd/hostapd.conf

# removes the wpa_supplicant file to signal the AP mode script it can start
sudo rm /etc/wpa_supplicant/wpa_supplicant.conf

# gives the exec permissions to the scripts
sudo chmod +x /etc/init.d/wifi_ap_mode
sudo chmod +x /home/pi/wifi_ap_mode.sh
sudo chmod +x /home/pi/wifi_client_mode.sh
sudo chmod +x /home/pi/hostname_upd.sh

# creates the necessary init symlinks
sudo update-rc.d wifi_ap_mode defaults

#cleanup
apt-get clean
apt-get autoremove -y
